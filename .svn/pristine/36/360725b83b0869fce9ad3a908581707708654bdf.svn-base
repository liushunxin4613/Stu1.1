package com.fengyang.fragment;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import org.json.JSONObject;

import com.alibaba.fastjson.JSON;
import com.android.volley.RequestQueue;
import com.android.volley.VolleyError;
import com.android.volley.Request.Method;
import com.android.volley.Response.Listener;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.Volley;
import com.fengyang.activity.ChooseCollegeActivity;
import com.fengyang.adapter.VolleyErrorAdapter;
import com.fengyang.db.CollegeDAO;
import com.fengyang.dialog.ChooseListDialog;
import com.fengyang.dialog.LoadingDialog;
import com.fengyang.entity.User;
import com.fengyang.model.Json;
import com.fengyang.service.InitUserService;
import com.fengyang.stu.MainActivity;
import com.fengyang.stu.R;
import com.fengyang.stu.StuApplication;
import com.fengyang.util.Config;
import com.fengyang.util.UriPrase;
import com.fengyang.util.ui.UIUtils;
import com.fengyang.volleyTool.DiskBitmapCache;
import com.fengyang.volleyTool.MultipartRequest;
import com.fengyang.volleyTool.MultipartRequestParams;
import com.fengyang.volleyTool.UserPhotoImageListener;

import android.app.Activity;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.Toast;

public class ModifyUserFragment extends Fragment implements OnClickListener{

	private String photoPath;
	/**
	 * Request请求队列
	 */
	private StuApplication application;
	private User user; 
	private RequestQueue mQueue;
	private ImageLoader imageLoader;
	private DiskBitmapCache diskCache;
	private int chooseType;
	private ChooseListDialog choosePicDialog;
	private LoadingDialog dialog;
	/**
	 * 拍照暂存的uri
	 */
	private Uri tempUri;
	/**
	 * 拍照暂存的file
	 */
	private File tempFile;
	/**
	 * 截图后保存图片的Uri
	 */
	private Uri cropUri;
	public static final int CHOOSE_TYPE_USER = 0;
	public static final int REQUEST_CHOOSE_IMAGE = 0;
	public static final int REQUEST_TAKE_PHOTO = 1;
	public static final int REQUEST_CROP_IMAGE = 2;

	private ImageButton mImageButton;
	private Button mButton;

	public static final String TAG = "ModifyUserFragment";
	private static ModifyUserFragment fragment;
	public static Fragment getInstance() {
		if (fragment == null)
			fragment = new ModifyUserFragment();
		return fragment;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		application = (StuApplication) getActivity().getApplication();
		mQueue = Volley.newRequestQueue(getActivity());
		diskCache = new DiskBitmapCache(getActivity().getCacheDir(), 10);
		imageLoader = new ImageLoader(mQueue, diskCache);
	}

	@Override
	public View onCreateView(LayoutInflater inflater,
			@Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_modify_user_photo,
				container, false);
		ListenThis(rootView);

		if (application.isLogin()) {
			user = application.getUser();
			if ((user.getPhotoPath() != null) && (user.getPhotoPath().length() != 0)) {
				requestUserPhoto(user.getPhotoPath());
			}
		}

		return rootView;
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {
		case R.id.bt_modify_back:
			uploadModify();
			break;
		case R.id.Ib_modify_user:
			setModify();
			break;
		}
	}
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		if (resultCode == Activity.RESULT_OK) {
			switch (requestCode) {
			case REQUEST_CHOOSE_IMAGE:
				Uri uri = data.getData();
				cropImage(uri);
				Log.d(TAG, "uri = " + uri.toString());
				break;
			case REQUEST_TAKE_PHOTO:
				Log.i(TAG, "tempUri = " + tempUri);
				cropImage(tempUri);
				break;
			case REQUEST_CROP_IMAGE:
				Log.i(TAG, cropUri.toString());
				mImageButton.setBackgroundResource(0);
				mImageButton.setImageURI(cropUri);
				// 删除拍照残余照片
				if (tempFile != null && tempFile.exists())
					tempFile.delete();
				break;
			}
		}
	}

	public void cropImage(Uri uri) {
		if (null == uri)
			return;

		File dir = getActivity()
				.getExternalFilesDir(Environment.DIRECTORY_DCIM);
		String fileName = System.currentTimeMillis() + ".jpg";
		File saveFile = new File(dir, fileName);
		cropUri = Uri.fromFile(saveFile);

		Intent intent = new Intent();
		
		
		intent.setAction("com.android.camera.action.CROP");
		intent.setDataAndType(uri, "image/*");// mUri是已经选择的图片Uri
		intent.putExtra("crop", "true");
		intent.putExtra("aspectX", 1);// 裁剪框比例
		intent.putExtra("aspectY", 1);
		intent.putExtra("outputX", Config.UPLOAD_USER_PHOTO_LEN);// 输出图片大小
		intent.putExtra("outputY", Config.UPLOAD_USER_PHOTO_LEN);
		intent.putExtra("scale", true);
		intent.putExtra(MediaStore.EXTRA_OUTPUT, cropUri);// 输出图片的Uri
		intent.putExtra("return-data", false);
		intent.putExtra("noFaceDetection", true);
		intent.putExtra("outputFormat", Bitmap.CompressFormat.JPEG.toString());
		startActivityForResult(intent, REQUEST_CROP_IMAGE);
	}
	private void setModify() {
		choosePhotoDialog(CHOOSE_TYPE_USER);
	}

	private void requestUserPhoto(String photoPath) {
		if (photoPath != null && photoPath.length() > 0) {
			String imgUrl = Config.USER_PHOTO_PATH + "/" + photoPath;
			imageLoader.get(imgUrl, new UserPhotoImageListener(mImageButton,
					getActivity()));
		}
	}

	private void choosePhotoDialog(int type) {
		chooseType = type;
		choosePicDialog = new ChooseListDialog(getActivity());
		choosePicDialog.addButton(getActivity().getResources().getString(
				R.string.dialog_take_photo));
		choosePicDialog.addButton(getActivity().getResources().getString(
				R.string.dialog_choose_photo));
		choosePicDialog
		.setOnclickListener(new DialogInterface.OnClickListener() {

			@Override
			public void onClick(DialogInterface dialog, int which) {
				if (checkSoftStage()) {
					Intent intent = null;
					switch (which) {
					case 0:
						File dir = getActivity().getExternalFilesDir(
								Environment.DIRECTORY_DCIM);
						Log.d(TAG,
								"dir path = " + dir.getAbsolutePath());
						intent = new Intent(
								MediaStore.ACTION_IMAGE_CAPTURE);
						String fileName = System.currentTimeMillis()
								+ ".jpg";
						tempFile = new File(dir, fileName);
						tempUri = Uri.fromFile(tempFile);
						intent.putExtra(MediaStore.EXTRA_OUTPUT,
								tempUri);
						startActivityForResult(intent,
								REQUEST_TAKE_PHOTO);
						break;
					case 1:
						// 调用系统图库，选择图片
						intent = new Intent(Intent.ACTION_GET_CONTENT);
						intent.addCategory(Intent.CATEGORY_OPENABLE);
						intent.setType("image/*");
						startActivityForResult(intent,
								REQUEST_CHOOSE_IMAGE);
						break;
					}
				}
			}
		});
		FragmentTransaction ft = getChildFragmentManager().beginTransaction();
		ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
		choosePicDialog.show(ft, TAG);
	}

	private boolean checkSoftStage() {
		if (Environment.getExternalStorageState().equals(
				Environment.MEDIA_MOUNTED)) { // 判断是否存在SD卡
			return true;
		} else {
			Toast.makeText(getActivity(), R.string.sdCard_error,
					Toast.LENGTH_SHORT).show();
			return false;
		}
	}
	private void ListenThis(View rootView) {
		mImageButton = (ImageButton) rootView.findViewById(R.id.Ib_modify_user);
		mImageButton.setOnClickListener(this);

		mButton = (Button) rootView.findViewById(R.id.bt_modify_back);
		mButton.setOnClickListener(this);
		
	}

	/**
	 * 上传图片
	 * 
	 * @param id
	 *            用户头像
	 */
	private void uploadModify() {
		if (cropUri == null) {
			Toast.makeText(getActivity(),getString(R.string.tv_modify_back_new_nofind), Toast.LENGTH_SHORT).show();
			return;
		}
		dialog=new LoadingDialog(getString(R.string.tv_modify_back_publishing));
		FragmentTransaction ft = getChildFragmentManager().beginTransaction();
		ft.setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE);
		dialog.show(ft, TAG);

		Uri.Builder builder = Uri.parse(Config.URL_UPLOAD_USER_PHOTO)
				.buildUpon();
		Log.d(TAG, "URL = " + builder.toString());
		MultipartRequestParams params = new MultipartRequestParams();
		String path = UriPrase.getPath(getActivity(),cropUri);
		File file = new File(path);
		params.put("id", user.getId().toString());
		params.put("uploadFileFileName", file.getName());
		try {
			params.put("uploadFile", new FileInputStream(file), file.getName(),
					"application/octet-stream");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		MultipartRequest picRequest = new MultipartRequest(Method.POST, params,
				builder.toString(), new Listener<JSONObject>() {

			@Override
			public void onResponse(JSONObject response) {
				Log.d(TAG, "response = " + response);
				Json json = JSON.parseObject(response.toString(),
						Json.class);
				if (json.isSuccess()) {
					user.setPhotoPath(json.getObj().toString());
					isSuccess();
				} else {
					isError(null);
				}
			}
		}, new VolleyErrorAdapter(getActivity()) {
			@Override
			protected void onOccurError(VolleyError error) {
				isError(null);
			}
		});
		picRequest.setTimeOut(20000, 0);
		picRequest.setTag(TAG);
		mQueue.add(picRequest);
		mQueue.start();
	}
	private void isSuccess() {
		Log.d(TAG, "user = " + user);
		application.setUser(user);
		if (dialog != null)
			dialog.dismiss();
		Intent intent = new Intent(getActivity(), InitUserService.class);
		intent.putExtra(InitUserService.KEY_START_SERVICE_FOR,
				InitUserService.TASK_UPDATE_USER);
		getActivity().startService(intent);
		MainActivity.showToast(getActivity(), R.string.tv_modify_back_success);
		getActivity().finish();
		startActivity(new Intent(getActivity(), MainActivity.class));

	}

	private void isError(String msg) {
		if (dialog != null)
			dialog.dismiss();
		if (msg != null)
			MainActivity.showToast(getActivity(), msg);
		else
			MainActivity.showToast(getActivity(),
					R.string.tv_modify_back_error);

	}

}
