package com.fengyang.util;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Locale;

import android.util.Log;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;

public class FormatUtils {

	protected static final String CHARSET = "utf-8";
	private static final String TAG = "FormatUtils";

	public static String priceFormat(double value) {
		if (value % 1.0 == 0)
			return String.valueOf((long) value);
		DecimalFormat df = new DecimalFormat("#.00");
		return df.format(value);
	}

	/**
	 * 将时间解析成字符串，格式为 yyyy-MM-dd
	 * 
	 * @param date
	 * @return
	 */
	public static String dateFormat(Date date) {
		if (date == null)
			return null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA);
		return sdf.format(date);
	}

	/**
	 * 解析格式为yyyy-MM-dd的字符串，返回解析得到的时间
	 * 
	 * @param dateStr
	 * @return
	 */
	public static Date parseDate(String dateStr) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.CHINA);
		try {
			return sdf.parse(dateStr);
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 将时间解析成字符串，格式为 yyyy-MM-dd HH:mm:ss
	 * 
	 * @param date
	 * @return
	 */
	public static String dateFormatWithTime(Date date) {
		if (date == null)
			return null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",
				Locale.CHINA);
		return sdf.format(date);
	}

	/**
	 * 解析格式为yyyy-MM-dd HH:mm:ss的字符串，返回解析得到的时间
	 * 
	 * @param dateStr
	 * @return
	 */
	public static Date parseDateWithTime(String dateStr) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss",
				Locale.CHINA);
		try {
			return sdf.parse(dateStr);
		} catch (Exception e) {
			return null;
		}
	}

	/**
	 * 将对象转换为Json字符串
	 * 
	 * @param obj
	 *            需要转换的对象
	 * @return
	 */
	public static String getJSONString(Object obj) {
		return getJSONString(obj, null, null);
	}

	/**
	 * 将对象转换为Json字符串
	 * 
	 * @param obj
	 *            需要转换的对象
	 * @param includesProperties
	 *            需要转换的属性
	 * @return
	 */
	public static String getJSONString(Object obj, String[] includesProperties) {
		return getJSONString(obj, includesProperties, null);
	}

	/**
	 * 将对象转换为Json字符串
	 * 
	 * @param obj
	 *            需要转换的对象
	 * @param includesProperties
	 *            需要转换的属性
	 * @param excludesProperties
	 *            不需要转换的属性
	 * @return
	 */
	public static String getJSONString(Object obj, String[] includesProperties,
			String[] excludesProperties) {
		FastjsonFilter filter = new FastjsonFilter();
		// excludes优先于includes
		if (excludesProperties != null && excludesProperties.length > 0) {
			filter.getExcludes().addAll(
					Arrays.<String> asList(excludesProperties));
		}
		if (includesProperties != null && includesProperties.length > 0) {
			filter.getIncludes().addAll(
					Arrays.<String> asList(includesProperties));
			Log.i(TAG, Arrays.toString(includesProperties));
		}
		// 使用SerializerFeature.WriteDateUseDateFormat特性
		// 来序列化日期格式的类型为yyyy-MM-dd hh24:mi:ss
		// 使用SerializerFeature.DisableCircularReferenceDetect特性关闭引用检测和生成

		String json = JSON.toJSONString(obj, filter,
				SerializerFeature.WriteDateUseDateFormat,
				SerializerFeature.DisableCircularReferenceDetect);
		Log.i(TAG, "转换后的JSON字符串：" + json);

		return json;
	}

	/**
	 * 正则表达式解析判断字符串的类型
	 * 
	 * @param str
	 *            需要解析的目标字符串
	 * @return 0：未知数据类型<br/>
	 *         1：手机号<br/>
	 *         2：电子邮件<br/>
	 *         3：座机<br/>
	 *         4：密码<br/>
	 */
	public static int praseStringType(String str) {
		if (str.matches("1[3|5|7|8|][0-9]{9}")) {
			return 1;
		} else if (str
				.matches("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)"
						+ "|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$")) {
			return 2;
		} else if (str
				.matches("^(\\d{3,4}-?)\\d{7,8}|\\((\\d{3,4}\\)-?)\\d{7,8}$")) {
			return 3;
		} else if (str
				.matches("^[a-zA-Z0-9`~!@#$%^&*()+=|_{}':;',//[//].\\<>/?]{6,20}$")) {
			return 4;
		}
		return 0;
	}

}
