package com.fengyang.fragment;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import org.json.JSONObject;

import android.app.Activity;
import android.app.DatePickerDialog.OnDateSetListener;
import android.content.DialogInterface;
import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;

import com.alibaba.fastjson.JSON;
import com.android.volley.Request.Method;
import com.android.volley.RequestQueue;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.android.volley.toolbox.Volley;
import com.fengyang.activity.ChooseListActivity;
import com.fengyang.activity.PartDetailHistoryActivity;
import com.fengyang.adapter.VolleyErrorAdapter;
import com.fengyang.db.AreaDAO;
import com.fengyang.db.PartClassDAO;
import com.fengyang.db.PublishHistoryDAO;
import com.fengyang.dialog.DatePickerDialog;
import com.fengyang.dialog.LoadingDialog;
import com.fengyang.dialog.LoadingDialog.OnBackPressedLisener;
import com.fengyang.dialog.MultiChoiceDialog;
import com.fengyang.entity.AppPartClass;
import com.fengyang.entity.AppPartTime;
import com.fengyang.entity.OubaArea;
import com.fengyang.entity.User;
import com.fengyang.entity.UserDetail;
import com.fengyang.model.Json;
import com.fengyang.stu.MainActivity;
import com.fengyang.stu.R;
import com.fengyang.stu.StuApplication;
import com.fengyang.util.Config;
import com.fengyang.util.FormatUtils;

/**
 * 发布兼职编辑界面
 * 
 * @author HeJie
 *
 */
public class PublishPartFragment extends Fragment implements OnClickListener {

	private AppPartTime partTime;
	private AppPartClass partClass;
	private LinearLayout partClassView;
	private TextView partClassTV;
	private EditText titleET;
	private EditText detailET;
	private Spinner timeTypeSpinner;
	private TextView timeTypeBtn;
	private Spinner payTypeSpinner;
	private EditText payET;
	private Spinner payUnitSpinner;
	private EditText numET;
	private EditText phoneET;
	private LinearLayout locationView;
	private TextView locationTV;
	private OubaArea province;
	private OubaArea city;
	private OubaArea distrct;
	private EditText placeET;
	private Button submitBtn;

	private RequestQueue mQueue;

	private Calendar calendar = Calendar.getInstance();

	private boolean timeSelect[] = new boolean[] { true, true, true, true,
			true, false, false };
	/**
	 * 标记工作时间是否设置完成
	 */
	private boolean isTimeSetUp = false;

	private OnDateSetListener dateSetListener;

	private static PublishPartFragment fragment;
	private LoadingDialog dialog;

	private int[] sexRId = { R.string.detail_truename_famale,
			R.string.detail_truename_male };

	private static final int REQUEST_CHOOSE_CLASS = 1;
	private static final int REQUEST_CHOOSE_AREA = 2;

	private static final String TAG_PUBLISH = "TagPublishPart";
	private static final String TAG = "publishPartFragment";

	public static Fragment getInstance() {
		if (fragment == null)
			fragment = new PublishPartFragment();
		return fragment;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		dateSetListener = new OnDateSetListener() {

			@Override
			public void onDateSet(DatePicker view, int year, int monthOfYear,
					int dayOfMonth) {
				String separete = getResources().getString(
						R.string.publish_job_time_separate);
				String text = year
						+ separete
						+ (monthOfYear + 1)
						+ separete
						+ dayOfMonth
						+ getResources().getString(
								R.string.publish_job_time_end_text);
				timeTypeBtn.setText(text);
				calendar.set(year, monthOfYear, dayOfMonth);
				isTimeSetUp = true;
			}
		};
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View rootView = inflater.inflate(R.layout.fragment_publish_part,
				container, false);
		partClassView = (LinearLayout) rootView
				.findViewById(R.id.publish_part_class);
		partClassTV = (TextView) rootView
				.findViewById(R.id.publish_part_class_show);
		titleET = (EditText) rootView
				.findViewById(R.id.publish_part_input_name);
		detailET = (EditText) rootView.findViewById(R.id.publish_input_detail);
		timeTypeSpinner = (Spinner) rootView
				.findViewById(R.id.publish_part_time_type);
		timeTypeBtn = (TextView) rootView
				.findViewById(R.id.publish_part_time_type_);
		payTypeSpinner = (Spinner) rootView
				.findViewById(R.id.publish_part_pay_type);
		payET = (EditText) rootView.findViewById(R.id.publish_input_price);
		payUnitSpinner = (Spinner) rootView
				.findViewById(R.id.publish_part_pay_unit);
		numET = (EditText) rootView.findViewById(R.id.publish_input_num);
		phoneET = (EditText) rootView.findViewById(R.id.publish_input_phone);
		locationView = (LinearLayout) rootView
				.findViewById(R.id.publish_part_location);
		locationTV = (TextView) rootView
				.findViewById(R.id.publish_part_locationTV);
		placeET = (EditText) rootView
				.findViewById(R.id.publish_part_input_place);
		submitBtn = (Button) rootView.findViewById(R.id.publish_part_btn);

		timeTypeSpinner.setOnItemSelectedListener(new OnItemSelectedListener() {

			@Override
			public void onItemSelected(AdapterView<?> parent, View view,
					int position, long id) {
				switch (position) {
				case 0:
					timeTypeBtn.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
					timeTypeBtn.setText(R.string.publish_job_time_area);
					break;

				case 1:
					timeTypeBtn.setTextSize(TypedValue.COMPLEX_UNIT_SP, 15);
					timeTypeBtn.setText(R.string.publish_job_end_time);
					break;
				}
				isTimeSetUp = false;
			}

			@Override
			public void onNothingSelected(AdapterView<?> parent) {
			}
		});
		payTypeSpinner.setSelection(2);

		partClassView.setOnClickListener(this);
		timeTypeBtn.setOnClickListener(this);
		locationView.setOnClickListener(this);
		submitBtn.setOnClickListener(this);
		return rootView;
	}

	/**
	 * 显示选择周的对话框
	 */
	private void showWeekSelect() {
		MultiChoiceDialog dialog = new MultiChoiceDialog(getActivity(),
				R.array.job_time_week, timeSelect);
		DialogInterface.OnClickListener listener = new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				switch (which) {
				case DialogInterface.BUTTON_POSITIVE:
					String[] week = getResources().getStringArray(
							R.array.sort_week_array);
					String pauseMark = getResources().getString(
							R.string.punctuation_pause);
					boolean[] choice = ((MultiChoiceDialog) dialog)
							.getChoiceItem();
					StringBuffer sb = new StringBuffer();
					for (int i = 0; i < choice.length; i++) {
						timeSelect[i] = choice[i];
						if (choice[i])
							sb.append(week[i] + pauseMark);
					}
					sb.deleteCharAt(sb.length() - 1);
					timeTypeBtn.setText(sb.toString());
					timeTypeBtn.setTextSize(TypedValue.COMPLEX_UNIT_SP, 12);
					isTimeSetUp = true;
					break;
				case DialogInterface.BUTTON_NEGATIVE:
					break;
				}
			}
		};

		dialog.setTitle(getString(R.string.publish_job_time_area));
		dialog.setOnclickListener(listener);
		FragmentTransaction ft = getChildFragmentManager().beginTransaction();
		dialog.show(ft, TAG);
	}

	private void endTimeSelect() {
		calendar.setTime(new Date());
		// calendar.set(Calendar.DAY_OF_MONTH,
		// calendar.get(Calendar.DAY_OF_MONTH) + 1);
		// 默认为三天后
		DatePickerDialog dialog = new DatePickerDialog(dateSetListener,
				calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH),
				calendar.get(Calendar.DAY_OF_MONTH) + 3);
		dialog.setTitle(getString(R.string.publish_job_end_time));
		// 最小截止时间为明天
		dialog.setMinDate(calendar.getTimeInMillis() + 24 * 3600000);
		FragmentTransaction ft = getChildFragmentManager().beginTransaction();
		dialog.show(ft, TAG);
	}

	/**
	 * 选择兼职类型
	 */
	private void chooseClass() {
		Intent intent = new Intent(getActivity(), ChooseListActivity.class);
		intent.putExtra(ChooseListActivity.KEY_DAO_CLASS, PartClassDAO.class);
		startActivityForResult(intent, REQUEST_CHOOSE_CLASS);
	}

	/**
	 * 选择地区
	 */
	private void chooseArea() {
		Intent intent = new Intent(getActivity(), ChooseListActivity.class);
		intent.putExtra(ChooseListActivity.KEY_DAO_CLASS, AreaDAO.class);
		startActivityForResult(intent, REQUEST_CHOOSE_AREA);
	}

	/**
	 * 检查用户输入合法性
	 * 
	 * @return
	 */
	private boolean checkData() {
		if (partClass == null) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_class);
			return false;
		}
		if (titleET.getText().length() == 0) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_name);
			titleET.requestFocus();
			titleET.requestFocusFromTouch();
			return false;
		}
		if (detailET.getText().length() == 0) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_detail);
			detailET.requestFocus();
			detailET.requestFocusFromTouch();
			return false;
		}
		if (timeTypeSpinner.getSelectedItemPosition() == 0 && !isTimeSetUp) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_work_time);
			return false;
		}
		if (timeTypeSpinner.getSelectedItemPosition() == 1 && !isTimeSetUp) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_end_time);
			return false;
		}
		if (payET.getText().length() == 0) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_pay);
			payET.requestFocus();
			payET.requestFocusFromTouch();
			return false;
		}
		if (numET.getText().length() == 0) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_num);
			numET.requestFocus();
			numET.requestFocusFromTouch();
			return false;
		}
		if (phoneET.getText().length() == 0
				|| (FormatUtils.praseStringType(phoneET.getText().toString()) != 1 && FormatUtils
						.praseStringType(phoneET.getText().toString()) != 3)) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_phone);
			phoneET.requestFocus();
			phoneET.requestFocusFromTouch();
			return false;
		}
		if (province == null) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_location);
			return false;
		}
		if (placeET.getText().length() == 0) {
			MainActivity.showToast(getActivity(),
					R.string.publish_job_time_tip_place);
			placeET.requestFocus();
			placeET.requestFocusFromTouch();
			return false;
		}
		return true;
	}

	/**
	 * 提交数据到服务器
	 */
	private void submitData() {
		if (checkData()) {
			partTime = new AppPartTime();
			StuApplication application = (StuApplication) getActivity()
					.getApplication();
			final User user = application.getUser();
			partTime.setOubaMember(user);
			UserDetail userDetail = application.getUserDetail();
			partTime.setPartPublisher(getString(sexRId[userDetail.getSex()],
					userDetail.getTrueName().substring(0, 1)));

			partTime.setPublisherType(user.getUserType());

			partTime.setAppPartClass(partClass);
			partTime.setPartTimeName(titleET.getText().toString().trim());
			partTime.setJobDescription(detailET.getText().toString().trim());
			partTime.setTimeType((short) timeTypeSpinner
					.getSelectedItemPosition());
			if (timeTypeSpinner.getSelectedItemPosition() == 0) {
				StringBuffer timeDescription = new StringBuffer();
				for (int i = 0; i < timeSelect.length; i++) {
					if (timeSelect[i]) {
						timeDescription.append(i + " ");
					}
				}
				timeDescription.deleteCharAt(timeDescription.length() - 1);
				partTime.setTimeDescription(timeDescription.toString());
			} else if (timeTypeSpinner.getSelectedItemPosition() == 1) {
				partTime.setEndTime(calendar.getTime());
			}
			partTime.setPublishTime(new Timestamp(new Date().getTime()));
			partTime.setPayWay(payTypeSpinner.getSelectedItemPosition());
			partTime.setPay(Double.valueOf(payET.getText().toString()));
			partTime.setPayUnit(payUnitSpinner.getSelectedItemPosition());
			partTime.setPartNum(Integer.valueOf(numET.getText().toString()));
			partTime.setPhone(phoneET.getText().toString());
			partTime.setPartCollected(0);
			partTime.setOubaAreaByProId(province);
			partTime.setOubaAreaByCityId(city);
			partTime.setOubaAreaByDisId(distrct);
			partTime.setAddress(placeET.getText().toString().trim());

			partTime.setIsPrccessed(true);
			partTime.setPartVisited(0);

			Uri.Builder builder = Uri.parse(Config.URL_PUBLISH_PART)
					.buildUpon();
			builder.appendQueryParameter("jsonStr",
					FormatUtils.getJSONString(partTime));
			Log.d(TAG, "URL = " + builder.toString());
			JsonObjectRequest request = new JsonObjectRequest(Method.GET,
					builder.toString(), null, new Listener<JSONObject>() {

						@Override
						public void onResponse(JSONObject response) {
							// TODO Auto-generated method stub
							Log.d(TAG, "response = " + response);
							Json json = JSON.parseObject(response.toString(),
									Json.class);
							dialog.dismiss();
							if (json.isSuccess()) {
								partTime.setPartTimeId(Integer.valueOf(json
										.getObj().toString()));
								PublishHistoryDAO dao = new PublishHistoryDAO(
										getActivity());
								dao.insertPart(user.getId(), partTime);
								MainActivity.showToast(getActivity(),
										R.string.publish_job_time_published);
								PublishPartFragment.this.getActivity().finish();
								// 记录发布历史，进入发布历史界面
								Intent intent = new Intent(getActivity(),
										PartDetailHistoryActivity.class);
								intent.putExtra(
										PartDetailHistoryActivity.KEY_PART_ID,
										(long) partTime.getPartTimeId());
								startActivity(intent);
							} else {
								MainActivity
										.showToast(
												getActivity(),
												R.string.publish_job_time_publish_error);
							}
						}
					}, new VolleyErrorAdapter(getActivity()) {
						@Override
						protected void onOccurError(VolleyError error) {
							super.onOccurError(error);
							dialog.dismiss();
						}
					});
			request.setTag(TAG_PUBLISH);
			mQueue = Volley.newRequestQueue(getActivity());
			mQueue.add(request);
			mQueue.start();
			dialog = new LoadingDialog(
					getString(R.string.publish_job_time_publishing));
			dialog.setOnBackPressedListener(new OnBackPressedLisener() {

				@Override
				public void onBackPressed() {
					dialog.dismiss();
					mQueue.cancelAll(TAG_PUBLISH);
				}
			});
			FragmentTransaction ft = getChildFragmentManager()
					.beginTransaction();
			dialog.show(ft, TAG);
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (mQueue != null)
			mQueue.cancelAll(TAG_PUBLISH);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		requestCode = requestCode & 0x0000ffff;
		if (resultCode == Activity.RESULT_OK) {
			ArrayList<Integer> choosedId = null;
			switch (requestCode) {
			case REQUEST_CHOOSE_CLASS:
				choosedId = data
						.getIntegerArrayListExtra(ChooseListActivity.KEY_CHOOSED_LIST);
				if (choosedId.size() > 0) {
					int id = choosedId.get(0);
					PartClassDAO dao = new PartClassDAO(getActivity());
					partClass = dao.queryById(id);
					partClassTV.setText(partClass.getClass_());
				}
				break;
			case REQUEST_CHOOSE_AREA:
				choosedId = data
						.getIntegerArrayListExtra(ChooseListActivity.KEY_CHOOSED_LIST);
				StringBuffer sb = new StringBuffer();
				AreaDAO areaDAO = new AreaDAO(getActivity());
				for (int i = 0; i < choosedId.size(); i++) {
					if (i == 0) {
						province = areaDAO.queryById(choosedId.get(i));
					} else if (i == 1) {
						city = areaDAO.queryById(choosedId.get(i));
					} else if (i == 2) {
						distrct = areaDAO.queryById(choosedId.get(i));
					}
					sb.append(areaDAO.queryById(choosedId.get(i)).getAreaName()
							+ " ");
				}
				sb.deleteCharAt(sb.length() - 1);
				locationTV.setText(sb.toString());
				break;
			default:
				break;
			}
		}
	}

	@Override
	public void onClick(View v) {
		int id = v.getId();
		switch (id) {
		case R.id.publish_part_class:
			chooseClass();
			break;
		case R.id.publish_part_location:
			chooseArea();
			break;
		case R.id.publish_part_time_type_:
			int item = timeTypeSpinner.getSelectedItemPosition();
			if (item == 0) {
				showWeekSelect();
			} else if (item == 1) {
				endTimeSelect();
			}
			break;
		case R.id.publish_part_btn:
			submitData();
			break;
		default:
			break;
		}
	}

}
